#!/usr/bin/env python3


API_URL = 'https://api.sipgate.com/v2'
STATUS = ('OK', 'WARNING', 'CRITICAL', 'UNKNOWN')


import logging
import argparse
import requests



class SipgateApi:
    """A simple API accessor to the sipgate API"""

    def __init__(self, username, password, uri_base=API_URL):
        self._username = username
        self._password = password
        self._URI_BASE = uri_base

    def phones(self):
        response = requests.get("%s/w0/devices" % self._URI_BASE, 
                                auth=(self._username, self._password),
                                headers={ 'Accept': 'application/json' })
        if response.status_code >= 300:
            raise RuntimeError(response.text)
        return response.json()

    def balance(self):
        response = requests.get("%s/balance" % self._URI_BASE,
                                auth=(self._username, self._password),
                                headers={ 'Accept': 'application/json' })
        if response.status_code >= 300:
            raise RuntimeError(response.text)
        return response.json()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Sipgate checker for Nagios')
    parser.add_argument('-u', dest='username',
                        help='sipgate API user name')
    parser.add_argument('-p', dest='password',
                        help='sipgate API password')
    parser.add_argument('-U', dest='uri',
                        default=API_URL,
                        help='sipgate API base URI')
    parser.add_argument('-b', dest='balance_warn',
                        type=float, default=0.0,
                        help='warning threshold for available blance')
    parser.add_argument('-B', dest='balance_crit',
                        type=float, default=0.0,
                        help='critical threshold for available blance')
    parser.add_argument('-d', dest='debugging',
                        const=True, nargs='?',
                        help='Enable debugging output')
    args = parser.parse_args()

    logging.basicConfig()
    requests_logger = logging.getLogger("requests.packages.urllib3")
    requests_logger.propagate = True
    if args.debugging:
        requests_logger.setLevel(logging.DEBUG)
        logging.getLogger().setLevel(logging.DEBUG)

    rc = 0  # OK
    tpl = "VOIP {:s} - balance:{:.2f} {:s};phones:{:s}"
    try:
        api = SipgateApi(args.username, args.password, uri_base=args.uri)

        balance_data = api.balance()
        balance_data['amount'] /= 10000
        if balance_data['amount'] <= args.balance_warn:
            rc = 1  # WARNING
        elif balance_data['amount'] <= args.balance_crit:
            rc = 2  # CRITICAL

        phone_data = api.phones()
        offline_phones = [x for x in phone_data['items'] if not x['online']]

        if len(offline_phones) > 0:
            rc = max(rc, 1)
            if len(offline_phones) == len(phone_data['items']):
                rc = 2

        phones_str = ["{}/{}({})".format(x['id'],
                                         x['alias'],
                                         'online' if x['online'] else 'offline')
                      for x in phone_data['items']]
        print(tpl.format(STATUS[rc],
                         balance_data['amount'],
                         balance_data['currency'],
                         ','.join(phones_str)))
    except Exception as e:
        print("VOIP UNKNOWN - %s" % e)
        rc = 3  # UNKNOWN

    exit(rc)
